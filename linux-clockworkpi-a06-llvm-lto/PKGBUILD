# ClockworkPI A06 (based on linux)
# Maintainer: Dan Johansen <strit@manjaro.org>
# Contributor: Max Fierke <max@maxfierke.com>
# Contributor: Kevin Mihelich <kevin@archlinuxarm.org>

pkgbase=linux-clockworkpi-a06-llvm-lto
_srcname=linux-6.6
_kernelname=${pkgbase#linux}
_desc="Kernel for ClockworkPI A06"
pkgver=6.6.1
pkgrel=1
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'dtc' 'llvm' 'clang' 'lld')
options=('!strip')
groups=('clockworkpi-a06')
source=("http://www.kernel.org/pub/linux/kernel/v6.x/${_srcname}.tar.xz"
	"http://www.kernel.org/pub/linux/kernel/v6.x/patch-${pkgver}.xz"
	'config'
	'60-linux.hook'
	'90-linux.hook'
	'linux.preset'
	'00-rockchip-suspend.patch'
	'01-clockworkpi-dts-a06.patch' # Potentially upstreamable, needs cleanup
	'02-backlight-ocp8178.patch' # Potentially upstreamable, needs cleanup
	'02-panel-cwd686-driver.patch' # Potentially upstreamable, needs cleanup
	'02-panel-cwu50-driver.patch' # Potentially upstreamable, needs cleanup
	'03-clockworkpi-dts-devterm.patch' # Potentially upstreamable, needs cleanup
	'03-clockworkpi-dts-uconsole.patch' # Potentially upstreamable, needs cleanup
	'04-mfd-axp20x-add-clockworkpi-a06-power-support.patch' # Looks potentially incorrect. Probably not upstreamable
	'05-battery-levels.patch'
	'06-clockworkpi-a06-extcart.patch')
md5sums=('452098d80ba925af3a4ab35998f3aef5'
	'0b8d38ca9ae6f0a7cc35651bc9b8c0e4'
	'ac287a2918b1b91ba559aff363a8196b'
	'ce6c81ad1ad1f8b333fd6077d47abdaf'
	'3dc88030a8f2f5a5f97266d99b149f77'
	'86d4a35722b5410e3b29fc92dae15d4b'
	'e94d53c07a34b595a28840eb4de14b36'
	'd25e050894dcb78fe15288afc706c60d'
	'36ed7cc43e828e5e10da7c1fad94ccd0'
	'f4878b65be3f5d61f9f09525ce1dc5ce'
	'fa604bb93bdc8d6082ec780c5141eb64'
	'c842f7e8d467746ddcdff83f953917fe'
	'17797d4ecef50d5d511f72d79d252b2a'
	'67dd5337d7f452843018b5533d614018'
	'd4edad82e08f96c88861a25850cd0e69'
	'440e9bca9a18c3ded882a0c4aee33d35')

prepare() {
	cd ${_srcname}

	# add upstream patch
	patch -Np1 -i "${srcdir}/patch-${pkgver}"

	cat "${srcdir}/config" > ./.config

	# Rockchip suspend patches
	patch -Np1 -i "${srcdir}/00-rockchip-suspend.patch"

	# ClockworkPI DevTerm A06 patches
	patch -Np1 -i "${srcdir}/01-clockworkpi-dts-a06.patch" # DTS

	patch -Np1 -i "${srcdir}/02-backlight-ocp8178.patch" # LCD backlight
	patch -Np1 -i "${srcdir}/02-panel-cwd686-driver.patch" # LCD CWD686 panel (DevTerm)
	patch -Np1 -i "${srcdir}/02-panel-cwu50-driver.patch" # LCD CWU50 panel (uConsole)

	# exactly one of the following two patches must be applied.
	#patch -Np1 -i "${srcdir}/03-clockworkpi-dts-devterm.patch" # LCD panel and backlight map
	patch -Np1 -i "${srcdir}/03-clockworkpi-dts-uconsole.patch" # LCD panel and backlight map

	patch -Np1 -i "${srcdir}/04-mfd-axp20x-add-clockworkpi-a06-power-support.patch"     # Battery/Charger

	# patch -Np1 -i "${srcdir}/05-battery-levels.patch"

	# CAUTION: for devterm-ext-cart only
	patch -Np1 -i "${srcdir}/06-clockworkpi-a06-extcart.patch"

	# add pkgrel to extraversion
	sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

	# don't run depmod on 'make install'. We'll do this ourselves in packaging
	sed -i '2iexit 0' scripts/depmod.sh
}

build() {
	cd ${_srcname}

	# get kernel version
	make LLVM=1 LLVM_IAS=1 prepare

	# load configuration
	# Configure the kernel. Replace the line below with one of your choice.
	#make menuconfig # CLI menu for configuration
	#make nconfig # new CLI menu for configuration
	#make xconfig # X-based configuration
	#make oldconfig # using old config from previous kernel version
	# ... or manually edit .config

	# Copy back our configuration (use with new kernel version)
	#cp ./.config /var/tmp/${pkgbase}.config

	####################
	# stop here
	# this is useful to configure the kernel
	#msg "Stopping build"
	#return 1
	####################

	#yes "" | make config

	# build!
	unset LDFLAGS
	make ${MAKEFLAGS} LLVM=1 LLVM_IAS=1 Image modules
	# Generate device tree blobs with symbols to support applying device tree overlays in U-Boot
	make ${MAKEFLAGS} LLVM=1 LLVM_IAS=1 DTC_FLAGS="-@" dtbs
}

_package() {
	pkgdesc="The Linux Kernel and modules - ${_desc}"
	depends=('coreutils' 'kmod' 'initramfs')
	optdepends=('crda: to set the correct wireless channels of your country'
		'linux-firmware: selection of common firmware files')
	provides=('kernel26' "linux=${pkgver}")
	conflicts=('kernel26' 'linux', 'linux-armv8' 'linux-aarch64')
	replaces=()
	backup=("etc/mkinitcpio.d/${pkgbase}.preset")
	install=${pkgname}.install

	cd ${_srcname}

	KARCH=arm64

	# get kernel version
	_kernver="$(make kernelrelease)"
	_basekernel=${_kernver%%-*}
	_basekernel=${_basekernel%.*}

	mkdir -p "${pkgdir}"/{boot,usr/lib/modules}
	make INSTALL_MOD_PATH="${pkgdir}/usr" modules_install
	make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install
	cp arch/$KARCH/boot/Image "${pkgdir}/boot"
	# yatli: devterm extcart overlay
	mkdir -p "${pkgdir}"/boot/overlays
	cp arch/$KARCH/boot/dts/rockchip/rk3399-clockworkpi-a06-extcart.dtbo "${pkgdir}/boot/overlays/"

	# make room for external modules
	local _extramodules="extramodules-${_basekernel}${_kernelname}"
	ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

	# add real version for building modules and running depmod from hook
	echo "${_kernver}" |
	install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

	# remove build and source links
	# 2023-10-30, Linux 6.6.0: somehow these don't exist...
	#rm "${pkgdir}"/usr/lib/modules/${_kernver}/{source,build}

	# now we call depmod...
	depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"


	# sed expression for following substitutions
	local _subst="
		s|%PKGBASE%|${pkgbase}|g
		s|%KERNVER%|${_kernver}|g
		s|%EXTRAMODULES%|${_extramodules}|g
	"

	# install mkinitcpio preset file
	sed "${_subst}" ../linux.preset |
	install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

	# install pacman hooks
	sed "${_subst}" ../60-linux.hook |
	install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
	sed "${_subst}" ../90-linux.hook |
	install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"
}

_package-headers() {
	pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
	provides=("linux-headers=${pkgver}")
	conflicts=('linux-headers', 'linux-aarch64-headers')
	replaces=()

	cd ${_srcname}
	local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

	install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
	install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

	mkdir "${_builddir}/.tmp_versions"

	cp -t "${_builddir}" -a include scripts

	install -Dt "${_builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
	install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s
	install -Dt "${_builddir}" -m644 vmlinux

	cp -t "${_builddir}/arch/${KARCH}" -a arch/${KARCH}/include
	mkdir -p "${_builddir}/arch/arm"
	cp -t "${_builddir}/arch/arm" -a arch/arm/include

	install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
	install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

	# http://bugs.archlinux.org/task/13146
	install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	# http://bugs.archlinux.org/task/20402
	install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	# add xfs and shmem for aufs building
	mkdir -p "${_builddir}"/{fs/xfs,mm}

	# copy in Kconfig files
	find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

	# remove unneeded architectures
	local _arch
	for _arch in "${_builddir}"/arch/*/; do
		[[ ${_arch} == */${KARCH}/ || ${_arch} == */arm/ ]] && continue
		rm -r "${_arch}"
	done

	# remove documentation files
	rm -r "${_builddir}/Documentation"

	# remove now broken symlinks
	find -L "${_builddir}" -type l -printf 'Removing %P\n' -delete

	# strip scripts directory
	local file
	while read -rd '' file; do
		case "$(file -bi "$file")" in
		application/x-sharedlib\;*)      # Libraries (.so)
			strip $STRIP_SHARED "$file" ;;
		application/x-archive\;*)        # Libraries (.a)
			strip $STRIP_STATIC "$file" ;;
		application/x-executable\;*)     # Binaries
			strip $STRIP_BINARIES "$file" ;;
		application/x-pie-executable\;*) # Relocatable binaries
			strip $STRIP_SHARED "$file" ;;
		esac
	done < <(find "${_builddir}" -type f -perm -u+x ! -name vmlinux -print0 2>/dev/null)
	strip $STRIP_STATIC "${_builddir}/vmlinux"

	# remove unwanted files
	find ${_builddir} -name '*.orig' -delete
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
	eval "package_${_p}() {
		_package${_p#${pkgbase}}
	}"
done
